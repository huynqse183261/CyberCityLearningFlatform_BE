// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using CyberCity.Doman.Models;
using Microsoft.EntityFrameworkCore;

namespace CyberCity.Doman.DBcontext;

public partial class CyberCityLearningFlatFormDBContext : DbContext
{
    public CyberCityLearningFlatFormDBContext()
    {
    }

    public CyberCityLearningFlatFormDBContext(DbContextOptions<CyberCityLearningFlatFormDBContext> options)
        : base(options)
    {
    }

    public virtual DbSet<ApprovalLog> ApprovalLogs { get; set; }

    public virtual DbSet<Certificate> Certificates { get; set; }

    public virtual DbSet<Conversation> Conversations { get; set; }

    public virtual DbSet<ConversationMember> ConversationMembers { get; set; }

    public virtual DbSet<Course> Courses { get; set; }

    public virtual DbSet<CourseEnrollment> CourseEnrollments { get; set; }

    public virtual DbSet<Lesson> Lessons { get; set; }

    public virtual DbSet<Message> Messages { get; set; }

    public virtual DbSet<Module> Modules { get; set; }

    public virtual DbSet<Notification> Notifications { get; set; }

    public virtual DbSet<Order> Orders { get; set; }

    public virtual DbSet<OrgMember> OrgMembers { get; set; }

    public virtual DbSet<Organization> Organizations { get; set; }

    public virtual DbSet<Payment> Payments { get; set; }

    public virtual DbSet<PricingPlan> PricingPlans { get; set; }

    public virtual DbSet<Subtopic> Subtopics { get; set; }

    public virtual DbSet<SubtopicProgress> SubtopicProgresses { get; set; }

    public virtual DbSet<TeacherStudent> TeacherStudents { get; set; }

    public virtual DbSet<Topic> Topics { get; set; }

    public virtual DbSet<User> Users { get; set; }

//    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
//#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
//        => optionsBuilder.UseNpgsql("Persist Security Info=True;Password=12345;Username=postgres;Database=CyberCityLearningFlatFormDB;Host=localhost");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.HasPostgresExtension("pgcrypto");

        modelBuilder.Entity<ApprovalLog>(entity =>
        {
            entity.HasKey(e => e.Uid).HasName("approval_logs_pkey");

            entity.ToTable("approval_logs", "cybercity");

            entity.Property(e => e.Uid)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("uid");
            entity.Property(e => e.ApprovedBy).HasColumnName("approved_by");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.OrderUid).HasColumnName("order_uid");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasColumnName("status");

            entity.HasOne(d => d.ApprovedByNavigation).WithMany(p => p.ApprovalLogs)
                .HasForeignKey(d => d.ApprovedBy)
                .HasConstraintName("approval_logs_approved_by_fkey");

            entity.HasOne(d => d.OrderU).WithMany(p => p.ApprovalLogs)
                .HasForeignKey(d => d.OrderUid)
                .HasConstraintName("approval_logs_order_uid_fkey");
        });

        modelBuilder.Entity<Certificate>(entity =>
        {
            entity.HasKey(e => e.Uid).HasName("certificates_pkey");

            entity.ToTable("certificates", "cybercity");

            entity.Property(e => e.Uid)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("uid");
            entity.Property(e => e.CertificateType)
                .HasMaxLength(50)
                .HasColumnName("certificate_type");
            entity.Property(e => e.CompletionPercentage)
                .HasPrecision(5, 2)
                .HasColumnName("completion_percentage");
            entity.Property(e => e.CourseUid).HasColumnName("course_uid");
            entity.Property(e => e.FileUrl).HasColumnName("file_url");
            entity.Property(e => e.IssuedAt)
                .HasDefaultValueSql("now()")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("issued_at");
            entity.Property(e => e.UserUid).HasColumnName("user_uid");

            entity.HasOne(d => d.CourseU).WithMany(p => p.Certificates)
                .HasForeignKey(d => d.CourseUid)
                .HasConstraintName("certificates_course_uid_fkey");

            entity.HasOne(d => d.UserU).WithMany(p => p.Certificates)
                .HasForeignKey(d => d.UserUid)
                .HasConstraintName("certificates_user_uid_fkey");
        });

        modelBuilder.Entity<Conversation>(entity =>
        {
            entity.HasKey(e => e.Uid).HasName("conversations_pkey");

            entity.ToTable("conversations", "cybercity");

            entity.Property(e => e.Uid)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("uid");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");
            entity.Property(e => e.IsGroup)
                .HasDefaultValue(false)
                .HasColumnName("is_group");
            entity.Property(e => e.OrgUid).HasColumnName("org_uid");
            entity.Property(e => e.Title)
                .HasMaxLength(255)
                .HasColumnName("title");

            entity.HasOne(d => d.Or).WithMany(p => p.Conversations)
                .HasForeignKey(d => d.OrgUid)
                .HasConstraintName("conversations_org_uid_fkey");
        });

        modelBuilder.Entity<ConversationMember>(entity =>
        {
            entity.HasKey(e => e.Uid).HasName("conversation_members_pkey");

            entity.ToTable("conversation_members", "cybercity");

            entity.Property(e => e.Uid)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("uid");
            entity.Property(e => e.ConversationUid).HasColumnName("conversation_uid");
            entity.Property(e => e.JoinedAt)
                .HasDefaultValueSql("now()")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("joined_at");
            entity.Property(e => e.UserUid).HasColumnName("user_uid");

            entity.HasOne(d => d.ConversationU).WithMany(p => p.ConversationMembers)
                .HasForeignKey(d => d.ConversationUid)
                .HasConstraintName("conversation_members_conversation_uid_fkey");

            entity.HasOne(d => d.UserU).WithMany(p => p.ConversationMembers)
                .HasForeignKey(d => d.UserUid)
                .HasConstraintName("conversation_members_user_uid_fkey");
        });

        modelBuilder.Entity<Course>(entity =>
        {
            entity.HasKey(e => e.Uid).HasName("courses_pkey");

            entity.ToTable("courses", "cybercity");

            entity.Property(e => e.Uid)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("uid");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.Level)
                .HasMaxLength(50)
                .HasColumnName("level");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("title");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.Courses)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("courses_created_by_fkey");
        });

        modelBuilder.Entity<CourseEnrollment>(entity =>
        {
            entity.HasKey(e => e.Uid).HasName("course_enrollments_pkey");

            entity.ToTable("course_enrollments", "cybercity");

            entity.Property(e => e.Uid)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("uid");
            entity.Property(e => e.CourseUid).HasColumnName("course_uid");
            entity.Property(e => e.EnrolledAt)
                .HasDefaultValueSql("now()")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("enrolled_at");
            entity.Property(e => e.UserUid).HasColumnName("user_uid");

            entity.HasOne(d => d.CourseU).WithMany(p => p.CourseEnrollments)
                .HasForeignKey(d => d.CourseUid)
                .HasConstraintName("course_enrollments_course_uid_fkey");

            entity.HasOne(d => d.UserU).WithMany(p => p.CourseEnrollments)
                .HasForeignKey(d => d.UserUid)
                .HasConstraintName("course_enrollments_user_uid_fkey");
        });

        modelBuilder.Entity<Lesson>(entity =>
        {
            entity.HasKey(e => e.Uid).HasName("lessons_pkey");

            entity.ToTable("lessons", "cybercity");

            entity.HasIndex(e => new { e.ModuleUid, e.OrderIndex }, "ix_lessons_module_order");

            entity.Property(e => e.Uid)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("uid");
            entity.Property(e => e.Content).HasColumnName("content");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");
            entity.Property(e => e.LessonType)
                .IsRequired()
                .HasMaxLength(20)
                .HasDefaultValueSql("'theory'::character varying")
                .HasColumnName("lesson_type");
            entity.Property(e => e.ModuleUid).HasColumnName("module_uid");
            entity.Property(e => e.OrderIndex)
                .HasDefaultValue(0)
                .HasColumnName("order_index");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("title");

            entity.HasOne(d => d.ModuleU).WithMany(p => p.Lessons)
                .HasForeignKey(d => d.ModuleUid)
                .HasConstraintName("lessons_module_uid_fkey");
        });

        modelBuilder.Entity<Message>(entity =>
        {
            entity.HasKey(e => e.Uid).HasName("messages_pkey");

            entity.ToTable("messages", "cybercity");

            entity.Property(e => e.Uid)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("uid");
            entity.Property(e => e.ConversationUid).HasColumnName("conversation_uid");
            entity.Property(e => e.Message1)
                .IsRequired()
                .HasColumnName("message");
            entity.Property(e => e.SenderUid).HasColumnName("sender_uid");
            entity.Property(e => e.SentAt)
                .HasDefaultValueSql("now()")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("sent_at");

            entity.HasOne(d => d.ConversationU).WithMany(p => p.Messages)
                .HasForeignKey(d => d.ConversationUid)
                .HasConstraintName("messages_conversation_uid_fkey");

            entity.HasOne(d => d.SenderU).WithMany(p => p.Messages)
                .HasForeignKey(d => d.SenderUid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("messages_sender_uid_fkey");
        });

        modelBuilder.Entity<Module>(entity =>
        {
            entity.HasKey(e => e.Uid).HasName("modules_pkey");

            entity.ToTable("modules", "cybercity");

            entity.HasIndex(e => new { e.CourseUid, e.OrderIndex }, "ix_modules_course_order");

            entity.Property(e => e.Uid)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("uid");
            entity.Property(e => e.CourseUid).HasColumnName("course_uid");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.OrderIndex)
                .HasDefaultValue(0)
                .HasColumnName("order_index");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("title");

            entity.HasOne(d => d.CourseU).WithMany(p => p.Modules)
                .HasForeignKey(d => d.CourseUid)
                .HasConstraintName("modules_course_uid_fkey");
        });

        modelBuilder.Entity<Notification>(entity =>
        {
            entity.HasKey(e => e.Uid).HasName("notifications_pkey");

            entity.ToTable("notifications", "cybercity");

            entity.Property(e => e.Uid)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("uid");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");
            entity.Property(e => e.IsRead)
                .HasDefaultValue(false)
                .HasColumnName("is_read");
            entity.Property(e => e.Message)
                .IsRequired()
                .HasColumnName("message");
            entity.Property(e => e.ReceiverUid).HasColumnName("receiver_uid");
            entity.Property(e => e.SenderUid).HasColumnName("sender_uid");

            entity.HasOne(d => d.ReceiverU).WithMany(p => p.NotificationReceiverUs)
                .HasForeignKey(d => d.ReceiverUid)
                .HasConstraintName("notifications_receiver_uid_fkey");

            entity.HasOne(d => d.SenderU).WithMany(p => p.NotificationSenderUs)
                .HasForeignKey(d => d.SenderUid)
                .HasConstraintName("notifications_sender_uid_fkey");
        });

        modelBuilder.Entity<Order>(entity =>
        {
            entity.HasKey(e => e.Uid).HasName("orders_pkey");

            entity.ToTable("orders", "cybercity");

            entity.Property(e => e.Uid)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("uid");
            entity.Property(e => e.Amount)
                .HasPrecision(12, 2)
                .HasColumnName("amount");
            entity.Property(e => e.ApprovalStatus)
                .HasMaxLength(50)
                .HasDefaultValueSql("'pending'::character varying")
                .HasColumnName("approval_status");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");
            entity.Property(e => e.EndAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("end_at");
            entity.Property(e => e.OrgUid).HasColumnName("org_uid");
            entity.Property(e => e.PaymentStatus)
                .HasMaxLength(50)
                .HasDefaultValueSql("'pending'::character varying")
                .HasColumnName("payment_status");
            entity.Property(e => e.PlanUid).HasColumnName("plan_uid");
            entity.Property(e => e.StartAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("start_at");
            entity.Property(e => e.UserUid).HasColumnName("user_uid");

            entity.HasOne(d => d.Or).WithMany(p => p.Orders)
                .HasForeignKey(d => d.OrgUid)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("orders_org_uid_fkey");

            entity.HasOne(d => d.PlanU).WithMany(p => p.Orders)
                .HasForeignKey(d => d.PlanUid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("orders_plan_uid_fkey");

            entity.HasOne(d => d.UserU).WithMany(p => p.Orders)
                .HasForeignKey(d => d.UserUid)
                .HasConstraintName("orders_user_uid_fkey");
        });

        modelBuilder.Entity<OrgMember>(entity =>
        {
            entity.HasKey(e => e.Uid).HasName("org_members_pkey");

            entity.ToTable("org_members", "cybercity");

            entity.Property(e => e.Uid)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("uid");
            entity.Property(e => e.JoinedAt)
                .HasDefaultValueSql("now()")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("joined_at");
            entity.Property(e => e.MemberRole)
                .HasMaxLength(50)
                .HasColumnName("member_role");
            entity.Property(e => e.OrgUid).HasColumnName("org_uid");
            entity.Property(e => e.UserUid).HasColumnName("user_uid");

            entity.HasOne(d => d.Or).WithMany(p => p.OrgMembers)
                .HasForeignKey(d => d.OrgUid)
                .HasConstraintName("org_members_org_uid_fkey");

            entity.HasOne(d => d.UserU).WithMany(p => p.OrgMembers)
                .HasForeignKey(d => d.UserUid)
                .HasConstraintName("org_members_user_uid_fkey");
        });

        modelBuilder.Entity<Organization>(entity =>
        {
            entity.HasKey(e => e.Uid).HasName("organizations_pkey");

            entity.ToTable("organizations", "cybercity");

            entity.Property(e => e.Uid)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("uid");
            entity.Property(e => e.ContactEmail)
                .HasMaxLength(255)
                .HasColumnName("contact_email");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");
            entity.Property(e => e.OrgName)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("org_name");
            entity.Property(e => e.OrgType)
                .HasMaxLength(50)
                .HasColumnName("org_type");
        });

        modelBuilder.Entity<Payment>(entity =>
        {
            entity.HasKey(e => e.Uid).HasName("payments_pkey");

            entity.ToTable("payments", "cybercity");

            entity.Property(e => e.Uid)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("uid");
            entity.Property(e => e.Amount)
                .HasPrecision(12, 2)
                .HasColumnName("amount");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");
            entity.Property(e => e.Currency)
                .HasMaxLength(10)
                .HasDefaultValueSql("'VND'::character varying")
                .HasColumnName("currency");
            entity.Property(e => e.OrderUid).HasColumnName("order_uid");
            entity.Property(e => e.PaidAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("paid_at");
            entity.Property(e => e.PaymentMethod)
                .HasMaxLength(50)
                .HasColumnName("payment_method");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasDefaultValueSql("'pending'::character varying")
                .HasColumnName("status");
            entity.Property(e => e.TransactionCode)
                .HasMaxLength(100)
                .HasColumnName("transaction_code");

            entity.HasOne(d => d.OrderU).WithMany(p => p.Payments)
                .HasForeignKey(d => d.OrderUid)
                .HasConstraintName("payments_order_uid_fkey");
        });

        modelBuilder.Entity<PricingPlan>(entity =>
        {
            entity.HasKey(e => e.Uid).HasName("pricing_plans_pkey");

            entity.ToTable("pricing_plans", "cybercity");

            entity.HasIndex(e => e.PlanName, "pricing_plans_plan_name_key").IsUnique();

            entity.Property(e => e.Uid)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("uid");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");
            entity.Property(e => e.DurationDays).HasColumnName("duration_days");
            entity.Property(e => e.Features)
                .HasMaxLength(255)
                .HasColumnName("features");
            entity.Property(e => e.PlanName)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("plan_name");
            entity.Property(e => e.Price)
                .HasPrecision(12, 2)
                .HasColumnName("price");
        });

        modelBuilder.Entity<Subtopic>(entity =>
        {
            entity.HasKey(e => e.Uid).HasName("subtopics_pkey");

            entity.ToTable("subtopics", "cybercity");

            entity.HasIndex(e => new { e.TopicUid, e.OrderIndex }, "ix_subtopics_topic_order");

            entity.Property(e => e.Uid)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("uid");
            entity.Property(e => e.Content).HasColumnName("content");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");
            entity.Property(e => e.OrderIndex)
                .HasDefaultValue(0)
                .HasColumnName("order_index");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("title");
            entity.Property(e => e.TopicUid).HasColumnName("topic_uid");

            entity.HasOne(d => d.TopicU).WithMany(p => p.Subtopics)
                .HasForeignKey(d => d.TopicUid)
                .HasConstraintName("subtopics_topic_uid_fkey");
        });

        modelBuilder.Entity<SubtopicProgress>(entity =>
        {
            entity.HasKey(e => e.Uid).HasName("subtopic_progress_pkey");

            entity.ToTable("subtopic_progress", "cybercity");

            entity.HasIndex(e => new { e.StudentUid, e.SubtopicUid }, "subtopic_progress_student_uid_subtopic_uid_key").IsUnique();

            entity.Property(e => e.Uid)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("uid");
            entity.Property(e => e.CompletedAt)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("completed_at");
            entity.Property(e => e.IsCompleted)
                .HasDefaultValue(false)
                .HasColumnName("is_completed");
            entity.Property(e => e.StudentUid).HasColumnName("student_uid");
            entity.Property(e => e.SubtopicUid).HasColumnName("subtopic_uid");

            entity.HasOne(d => d.StudentU).WithMany(p => p.SubtopicProgresses)
                .HasForeignKey(d => d.StudentUid)
                .HasConstraintName("subtopic_progress_student_uid_fkey");

            entity.HasOne(d => d.SubtopicU).WithMany(p => p.SubtopicProgresses)
                .HasForeignKey(d => d.SubtopicUid)
                .HasConstraintName("subtopic_progress_subtopic_uid_fkey");
        });

        modelBuilder.Entity<TeacherStudent>(entity =>
        {
            entity.HasKey(e => e.Uid).HasName("teacher_student_pkey");

            entity.ToTable("teacher_student", "cybercity");

            entity.Property(e => e.Uid)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("uid");
            entity.Property(e => e.CourseUid).HasColumnName("course_uid");
            entity.Property(e => e.StudentUid).HasColumnName("student_uid");
            entity.Property(e => e.TeacherUid).HasColumnName("teacher_uid");

            entity.HasOne(d => d.CourseU).WithMany(p => p.TeacherStudents)
                .HasForeignKey(d => d.CourseUid)
                .HasConstraintName("teacher_student_course_uid_fkey");

            entity.HasOne(d => d.StudentU).WithMany(p => p.TeacherStudentStudentUs)
                .HasForeignKey(d => d.StudentUid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("teacher_student_student_uid_fkey");

            entity.HasOne(d => d.TeacherU).WithMany(p => p.TeacherStudentTeacherUs)
                .HasForeignKey(d => d.TeacherUid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("teacher_student_teacher_uid_fkey");
        });

        modelBuilder.Entity<Topic>(entity =>
        {
            entity.HasKey(e => e.Uid).HasName("topics_pkey");

            entity.ToTable("topics", "cybercity");

            entity.HasIndex(e => new { e.LessonUid, e.OrderIndex }, "ix_topics_lesson_order");

            entity.Property(e => e.Uid)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("uid");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.LessonUid).HasColumnName("lesson_uid");
            entity.Property(e => e.OrderIndex)
                .HasDefaultValue(0)
                .HasColumnName("order_index");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("title");

            entity.HasOne(d => d.LessonU).WithMany(p => p.Topics)
                .HasForeignKey(d => d.LessonUid)
                .HasConstraintName("topics_lesson_uid_fkey");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.Uid).HasName("users_pkey");

            entity.ToTable("users", "cybercity");

            entity.HasIndex(e => e.Email, "users_email_key").IsUnique();

            entity.HasIndex(e => e.Username, "users_username_key").IsUnique();

            entity.Property(e => e.Uid)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("uid");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("created_at");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("email");
            entity.Property(e => e.FullName)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("full_name");
            entity.Property(e => e.Image).HasColumnName("image");
            entity.Property(e => e.PasswordHash)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("password_hash");
            entity.Property(e => e.Role)
                .IsRequired()
                .HasMaxLength(50)
                .HasDefaultValueSql("'student'::character varying")
                .HasColumnName("role");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasDefaultValueSql("'Active'::character varying")
                .HasColumnName("status");
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("username");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}